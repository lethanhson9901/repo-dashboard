name: Update and Deploy to GitHub Pages
on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  fetch-github:
    runs-on: ubuntu-latest
    if: "github.event_name == 'schedule' || (contains(github.event.head_commit.message, '[update-repos]') && !contains(github.event.head_commit.message, 'Update starred repos data'))"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Fetch GitHub stars
        env:
          GH_USERNAME: ${{ secrets.GH_USERNAME }}
          GH_PAT: ${{ secrets.GH_PAT }}
          OUTPUT_FILE: src/data/repos.json
          GITHUB_API_VERSION: 2022-11-28
          ITEMS_PER_PAGE: 100
        run: |
          mkdir -p src/data
          python backend/pull_your_star_repos.py
      - uses: actions/upload-artifact@v4
        with:
          name: github-data
          path: src/data/repos.json

  fetch-reddit:
    runs-on: ubuntu-latest
    if: "github.event_name == 'schedule' || (contains(github.event.head_commit.message, '[update-repos]'))"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Fetch Reddit data
        env:
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          REDDIT_USERNAME: ${{ secrets.REDDIT_USERNAME }}
          REDDIT_PASSWORD: ${{ secrets.REDDIT_PASSWORD }}
        run: |
          mkdir -p src/data/reddit
          python backend/reddit/main.py
          python backend/reddit/get_news.py
      - uses: actions/upload-artifact@v4
        with:
          name: reddit-data
          path: src/data/reddit/

  # fetch-gmail:
  #   runs-on: ubuntu-latest
  #   if: "github.event_name == 'schedule' || (contains(github.event.head_commit.message, '[update-repos]'))"
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.x'
  #     - run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         pip install google-auth-oauthlib google-auth-httplib2 google-api-python-client
  #     - name: Fetch Gmail data
  #       env:
  #         GMAIL_CREDENTIALS: ${{ secrets.GMAIL_CREDENTIALS }}
  #         GMAIL_TOKEN: ${{ secrets.GMAIL_TOKEN }}
  #       run: |
  #         echo "$GMAIL_CREDENTIALS" > credentials.json
  #         echo "$GMAIL_TOKEN" > token.json
  #         mkdir -p src/data/gmail
  #         python backend/gmail/get_inbox.py
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: gmail-data
  #         path: src/data/gmail/

  combine-and-commit:
    needs: [fetch-github, fetch-reddit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download github data
        uses: actions/download-artifact@v4
        with:
          name: github-data
          path: src/data/
      - name: Download reddit data
        uses: actions/download-artifact@v4
        with:
          name: reddit-data
          path: src/data/reddit/
      - name: Download gmail data
        uses: actions/download-artifact@v4
        with:
          name: gmail-data
          path: src/data/gmail/
      - name: Commit and push changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git add src/data/
          git diff --quiet && git diff --staged --quiet || (git commit -m "[ci run]: Update data" && git push)
          
  build:
    needs: combine-and-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main  # Ensure we get the latest changes
      
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          
      - name: Install dependencies
        run: npm install
        
      - name: Build
        run: npm run build
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'dist'

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Fallback build and deploy if update-repos is skipped
  build-without-update:
    runs-on: ubuntu-latest
    if: "github.event_name != 'schedule' && (!contains(github.event.head_commit.message, '[update-repos]') || contains(github.event.head_commit.message, 'Update starred repos data'))"
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          
      - name: Install dependencies
        run: npm install
        
      - name: Build
        run: npm run build
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'dist'

  deploy-without-update:
    needs: build-without-update
    runs-on: ubuntu-latest
    if: "github.event_name != 'schedule' && (!contains(github.event.head_commit.message, '[update-repos]') || contains(github.event.head_commit.message, 'Update starred repos data'))"
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
